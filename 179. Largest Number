Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.

Since the result may be very large, so you need to return a string instead of an integer.

 

Example 1:

Input: nums = [10,2]
Output: "210"
Example 2:

Input: nums = [3,30,34,5,9]
Output: "9534330"

class Solution:
    def largestNumber(self, nums: List[int]) -> str:
        
        #First, turn each number in nums into a string.
        numsString = list(map(str, nums))

        #Here, we use a lambda function to artificially "stretch" each value in nums out
        #by an arbitary amount. This is done to get a better understanding of how the numbers
        #would look when concatenated. Ex: 3^10 = 3333333333, and 30^10 = 30303030303030303030.
        #Since 333 > 303, we know that 3 has to come first in the final string. 
        #We also make sure to sort in reverse, since the sort function automatically sorts
        #in ascending order, which would not work for the final answer.
        numsString.sort(key = lambda x: x*10, reverse = True)

        #Join the strings together.
        largestNum = ''.join(numsString)

        #Handle the case with leading zeros:
        if largestNum[0] == '0':
            return '0'
        
        return largestNum
