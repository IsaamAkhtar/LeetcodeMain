You are given an integer array arr of length n that represents a permutation of the integers in the range [0, n - 1].

We split arr into some number of chunks (i.e., partitions), and individually sort each chunk. After concatenating them, the result should equal the sorted array.

Return the largest number of chunks we can make to sort the array.

 

Example 1:

Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.
For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.
Example 2:

Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].
However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.

class Solution:
    def maxChunksToSorted(self, arr: List[int]) -> int:

        """
        The crucial observation is that if, at any point in the array, the maximum element encountered so far is equal to the current index i, then we can split the array at this point. This is because all the elements up to index i are guaranteed to be in their correct positions (or could be sorted independently and still be correct).
For example, consider the index i = 4 and the maximum element encountered so far is also 4. This means all elements from the start to index 4 are from the set {0, 1, 2, 3, 4}. Sorting these elements will not disturb the order of any elements, and thus you can safely make a chunk up to this point.
        """
        #Initialise variables to find the maximum value in the array,
        #the answer, and the length of the array.
        maximum = 0
        answer = 0
        length = len(arr)

        #Loop over the length of the array:
        for i in range(length):
            #Reassign the maximum to the current if needed:
            maximum = max(maximum, arr[i])
            #If we find that the maximum is the current index, we increment our answer.
            if(maximum == i):
                answer += 1
        return answer
