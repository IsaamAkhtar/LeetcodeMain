There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique.

 

Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.
Example 2:

Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
Therefore, you can't travel around the circuit once no matter where you start.

class Solution:
    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:
        
        #Initialise values for the total gas used, the gas that has been used up to a certain
        #point, and the starting gas station.
        totalGas = 0
        currentGas = 0
        startStation = 0

        #Iterate through the array of stations to test each station as a valid starting
        #station.
        for i in range(len(gas)):

            #Assign the values for the total gas and current:
            totalGas += gas[i] - cost[i]
            currentGas += gas[i] - cost[i]

            #Here, we check to see if the current gas is now negative. If it is, we know that 
            #the gas station (i) we are currently iterating over is not a valid starting point,
            #because the cost to move to the next station is greater the amount of gas availible
            #at the next station.
            if currentGas < 0:

                #Reaching this point ensures that we have a invalid starting location, so
                #we move on to the next station, and reset the current amount of gas.
                startStation = i + 1
                currentGas = 0

        #Here we check to make sure that a valid solution actually exists, meaning that there
        #is at least one possible circuit.
        if totalGas < 0:
            return -1
        else:
            return startStation
