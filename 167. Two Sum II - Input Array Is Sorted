Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].

class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        #We use the fact that it is sorted in non-decreasing order to solve it by using two
        #pointers.

        #Initializing the two pointers.
        left = 0
        right = len(numbers) - 1

        #We keep looping until the right and left pointers havent "crossed" each other.
        while left < right:

            #Get the total value at the initial leftmost and rightmost indices.
            total = numbers[left] + numbers[right]

            #Here we check to see if the target has been at the current indices, and return it.
            if total == target:
                return [left + 1, right + 1]
            
            #If the target has not been found and the current total is greater then the 
            #target, we decrement the right pointer (to move it towards a smaller value)
            #otherwise, our total is too small, and we increment the left pointer.
            elif total > target:
                right -= 1
            else:
                left += 1
